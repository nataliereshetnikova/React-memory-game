{"version":3,"sources":["Box.js","BoxList.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Box","_this","this","id","props","style","showing","backgroundColor","react_default","a","createElement","className","onClick","Component","BoxList","handleClick","boxes","map","box","src_Box_0","Object","assign","key","cardState","Navbar","_ref","onNewGame","CardState","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","shuffle","bind","assertThisInitialized","handleNewGame","_this2","mapCardState","idsToChange","newCardState","b","includes","objectSpread","foundCard","find","noClick","showingCards","filter","ids","length","hidingCards","setState","setTimeout","array","i","j","Math","floor","random","src_NavBar","src_BoxList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60bc7534.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Box.css';\r\n\r\nclass Box extends Component{\r\n  static propTypes = {\r\n    id:PropTypes.number.isRequired,\r\n    cardState: PropTypes.number.isRequired,\r\n    backgroundColor: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n    showing:PropTypes.bool.isRequired\r\n}\r\nrender(){\r\n  const {id} = this.props;\r\n    const style = {};\r\n    if(this.props.showing){\r\n      style.backgroundColor = this.props.backgroundColor;\r\n    }\r\n     return(\r\n      <button \r\n      className = \"box\" \r\n      style={style}\r\n      onClick={()=>this.props.onClick(id)}\r\n      >\r\n      </button>\r\n     )\r\n }\r\n}  \r\n  export default Box;","import React, { Component} from 'react';\r\nimport Box from './Box';\r\nimport './BoxList.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass BoxList extends Component{\r\n    static propTypes = {\r\n        boxes: PropTypes.arrayOf(PropTypes.object),\r\n        handleClick: PropTypes.func.isRequired\r\n    }\r\n    render(){\r\n        const handleClick = this.props.handleClick;\r\n        const boxes = this.props.boxes.map((box) => (\r\n            <Box\r\n              key={box.id}\r\n              {...box}\r\n              showing={box.cardState !== 0}\r\n              backgroundColor={box.backgroundColor}\r\n              onClick={()=>handleClick(box.id)}\r\n            />\r\n          ));\r\n        return(\r\n            <div className=\"BoxList\">\r\n                {boxes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n   export default BoxList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './NavBar.css';\r\n\r\nconst Navbar = ({onNewGame}) => (\r\n  <header>\r\n    <h2>Memory Game</h2>\r\n    <nav>\r\n      <li><button onClick={onNewGame}>New Game</button></li>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nNavbar.propTypes = {\r\n  onNewGame: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport BoxList from\"./BoxList\";\nimport NavBar from \"./NavBar\";\nimport './App.css';\n\nconst CardState = {\n  HIDING:0,\n  SHOWING:1,\n  MATCHING:2\n}\nlet boxes = [\n    {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n    {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n    {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n    {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n    {id: 4, cardState: CardState.HIDING, backgroundColor: 'green'},\n    {id: 5, cardState: CardState.HIDING, backgroundColor: 'green'},\n    {id: 6, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n    {id: 7, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n    {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n    {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n    {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n    {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n    {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n    {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n    {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'},\n    {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'}\n  ];\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {boxes: this.shuffle(boxes)};\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n  handleClick(id) {\n    const mapCardState = (boxes, idsToChange, newCardState) => {\n      return boxes.map(b => {\n        if (idsToChange.includes(b.id)) {\n          return {\n            ...b,\n            cardState: newCardState\n          };\n        }\n        return b;\n      });\n    }\n\n    const foundCard = this.state.boxes.find(b => b.id === id);\n    \n    if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n      return;\n    }\n    \n    let noClick = false;\n    \n    let boxes = mapCardState(this.state.boxes, [id], CardState.SHOWING);\n    \n    const showingCards =  boxes.filter((b) => b.cardState === CardState.SHOWING);\n    \n    const ids = showingCards.map(b => b.id);\n    \n    if (showingCards.length === 2 &&\n        showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n          boxes = mapCardState(boxes, ids, CardState.MATCHING);\n    } else if (showingCards.length === 2) {\n      let hidingCards = mapCardState(boxes, ids, CardState.HIDING);\n      \n      noClick = true;\n      \n      this.setState({boxes, noClick}, () => {\n        setTimeout(() => {\n          // set the state of the cards to HIDING after 1.3 seconds\n          this.setState({boxes: hidingCards, noClick: false});\n        }, 1300);\n      });\n      return;\n    }\n    \n    this.setState({boxes, noClick});\n  }\n  handleNewGame(){\n    let boxes = this.state.boxes.map((box)=>(\n      {\n        ...box,\n        cardState:box.cardState = CardState.HIDING\n      }\n    ))\n    boxes = this.shuffle(boxes);\n    this.setState({boxes});\n  }\n  shuffle(array){\n      for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n}\n \n  render() {\n    return (\n      <div className=\"App\">\n          < NavBar onNewGame={this.handleNewGame}/>\n          <BoxList handleClick={this.handleClick} boxes={this.state.boxes} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}